      - name: Normalize namespace var
        id: ns
        run: |
          NS="$(printf "%s" "${{ secrets.K8S_NAMESPACE }}" | tr -d '\r' | tr -d '\n' | xargs)"
          echo "NS=$NS"
          echo "NS=$NS" >> $GITHUB_OUTPUT

      - name: Ensure namespace exists
        run: |
          # або застосувати маніфест, або створити, якщо нема
          kubectl apply -f k9s/namespace.yaml || true   # <- якщо в тебе інша текá, лиш k8s/
          kubectl get ns "${{ steps.ns.outputs.NS }}" >/dev/null 2>&1 || \
          kubectl create ns "${{ steps.ns.outputs.NS }}"

      - name: Create/Update app secrets from ENV_FILE
        run: |
          cat > .env <<'EOF'
          ${{ secrets.ENV_FILE }}
          EOF
          # Безпечно: і створення, і апдейт у потрібному namespace
          kubectl -n "${{ steps.ns.outputs.NS }}" create secret generic app-secrets \
            --from-env-file=.env --dry-run=client -o yaml | \
          kubectl -n "${{ steps.ns.outputs.NS }}" apply -f -

      - name: Apply manifests
        run: |
          kubectl -n "${{ steps.ns.outputs.NS }}" apply -f k8s/deployment-redis.yaml -f k8s/service-redis.yaml
          kubectl -n "${{ steps.ns.outputs.NS }}" apply -f k8s/deployment-app.yaml -f k8s/service-app.yaml

      - name: Set new image and rollout
        run: |
          kubectl -n "${{ steps.ns.outputs.NS }}" set image deployment/${{ env.K8S_DEPLOYMENT }} ${{ env.K8S_CONTAINER }}="${{ needs.build-push.outputs.IMAGE_URI }}"
          kubectl -n "${{ steps.ns.outputs.NS }}" rollout status deployment/${{ env.K8S_DEPLOYMENT }} --timeout=180s
