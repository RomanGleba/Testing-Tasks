name: CI-CD
on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

concurrency:
  group: ci-cd-${{ github.ref }}
  cancel-in-progress: true

env:
  # Ім'я деплоймента та контейнера в маніфестах (звір із k8s/deployment-app.yaml)
  K8S_DEPLOYMENT: nestjs-app
  K8S_CONTAINER: app

jobs:
  build-push:
    runs-on: ubuntu-latest
    outputs:
      IMAGE_URI: ${{ steps.meta.outputs.image_uri }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials (static keys)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set image tag
        id: vars
        run: echo "TAG=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Build & push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:${{ steps.vars.outputs.TAG }}
            ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Export image URI
        id: meta
        run: echo "image_uri=${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:${{ steps.vars.outputs.TAG }}" >> $GITHUB_OUTPUT

  deploy:
    needs: build-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials (static keys)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        # Можна зафіксувати версію під EKS (наприклад v1.30.0):
        # with:
        #   version: 'v1.30.0'

      - name: Update kubeconfig for EKS
        run: aws eks update-kubeconfig --name "${{ secrets.EKS_CLUSTER }}" --region "${{ secrets.AWS_REGION }}"

      - name: Ensure namespace + app secrets from ENV_FILE
        run: |
          kubectl apply -f k8s/namespace.yaml || true
          # Згенерувати секрет app-secrets із мультилайн secret ENV_FILE
          cat > .env <<'EOF'
          ${{ secrets.ENV_FILE }}
          EOF
          kubectl -n "${{ secrets.K8S_NAMESPACE }}" create secret generic app-secrets \
            --from-env-file=.env --dry-run=client -o yaml | kubectl apply -f -

      - name: Apply manifests
        run: |
          # Redis
          kubectl -n "${{ secrets.K8S_NAMESPACE }}" apply -f k8s/deployment-redis.yaml -f k8s/service-redis.yaml
          # App (Deployment + Service)
          kubectl -n "${{ secrets.K8S_NAMESPACE }}" apply -f k8s/deployment-app.yaml -f k8s/service-app.yaml
          # (опційно) Ingress/HPA/NetworkPolicy:
          # kubectl -n "${{ secrets.K8S_NAMESPACE }}" apply -f k8s/ingress.yaml -f k8s/hpa.yaml -f k8s/networkpolicy.yaml

      - name: Set new image and rollout
        run: |
          kubectl -n "${{ secrets.K8S_NAMESPACE }}" set image deployment/${{ env.K8S_DEPLOYMENT }} ${{ env.K8S_CONTAINER }}="${{ needs.build-push.outputs.IMAGE_URI }}" --record
          kubectl -n "${{ secrets.K8S_NAMESPACE }}" rollout status deployment/${{ env.K8S_DEPLOYMENT }} --timeout=180s
